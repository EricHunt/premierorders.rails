<% content_for :head do %>
  <%= javascript_include_tag 'jquery-ui-1.8.7.custom.min.js' %>
  <script type="text/javascript">
    var add_method = function() {
      return $('#add_property_form input:radio[name=add_property_method]:checked').val();
    };

    var selected_descriptor_id = function() {
      return $("#descriptor_select option:selected").val();
    };

    var with_descriptors = function(mod, cont) {
      $.get("/items/"+mod+"/property_descriptors", cont, "json");
    };

    var add_property_data = function() {
        var request = {
          type: add_method(),
          qualifiers: [],
          data: { }
        };

        var add_qualifiers = function(element) {
          $("select[name=property_qualifiers] > option:selected", element).each(
            function(index, element) {
              request.qualifiers.push($(element).val());
            }
          );
        };
        
        if (add_method() === "new") {
          var form_element = $("#add_new_property");
          add_qualifiers(form_element);

          request.data.name = $("input:text[name=property_name]", form_element).val();
          request.data.descriptor_id = selected_descriptor_id();
          request.data.values = [];

          $("#new_property_values div.property_value.descriptor_"+request.data.descriptor_id).each(
            function(index, pv_element) {
              var new_value = {};
              $(".property_value_field", pv_element).each(
                function(vfi, vf_element) {
                  new_value[$(vf_element).attr('name')] = vf_element.val();
                }
              );
              
              request.data.values.push(new_value);
            }
          );
        } else {
          var form_element = $("#add_existing_property");
          add_qualifiers(form_element);
          request.data.property_id = $("input:hidden[name=property_id]", form_element).val();
        }

        return request;
    };

    // replaces the options for the property qualifier select in both the new and existing microforms
    var update_qualifier_lists = function(qualifiers) {
      $("select[name=property_qualifiers] > option").remove();
      if (qualifiers.length === 0) {
        $(".qualifier_select").hide(); 
      } else {
        for (qualifier in qualifiers) {
          $("select[name=property_qualifiers]").append('<option value="'+qualifier+'">'+qualifier+'</option>');
        }
        $(".qualifier_select").show(); 
      }
    };

    var update_descriptor_select = function(descriptors) {
      for (i = 0; i < descriptors.length; i++) {
        $("#descriptor_select").append('<option value="'+i+'">'+descriptors[i].family+'</option>');
      }
    };

    // reaction for add property method change
    var add_method_change_reaction = function(descriptors) {
      $("#add_property_form input:radio[name=add_property_method]").change(function(ev) {
        if ($(ev.target).val() === "new") {
          $("#add_existing_property").hide();
          $("#add_new_property").show();
          $("#add_property_submit" ).show();
          descriptors[selected_descriptor_id()].qualifiers;
        } else {
          $("#add_new_property").hide();
          $("#add_existing_property").show();
        }
      });
    };

    var add_descriptor_change_reaction = function(descriptors) {
      // reaction for descriptor selection change
      $("#descriptor_select").change(function(ev) {
        var did = ev.target.val();
        update_qualifier_lists(descriptors[did].qualifiers);
        if (add_method() === "new") {
          $("#new_property_values div.property_value").hide();
          $("#new_property_values div.descriptor_"+did).show();
        } else {
          // just hide the display and remove the value from the hidden field.
          // it will be repopulated when the user selects a new value from 
          // a search result
          $("#add_property_submit" ).hide();
          $("#add_existing_property_search").val('');
          $("#add_existing_property input:hidden[name=property_id]").val(null);
          $("#existing_property_display").hide();
        }
      });
    };

    var enable_autocomplete = function(descriptors) {
      $("#add_existing_property_search").autocomplete({
        minLength: 0,
        source: function( request, response ) {
          var request_body = {
            family: descriptors[selected_descriptor_id()].family, 
            term: request.term
          };

          var response_wrapper = function(data) {
            if (data.length == 0) $(".search_notice").html('(no results returned)');
            return response(data);
          };

          $(".search_notice").html('');
          $("#existing_property_display").hide();
          $.get("/properties/search", request_body, response_wrapper, "json");
        },
        select: function( event, ui ) {
          // ui.item.value is an object with the following structure:
          //{
          //  property_id: int,
          //  property_name: string,
          //  property_values: [object]
          //}
          
          $("#add_property_submit").show();
          $("#add_existing_property_search").val( ui.item.label );
          $("#add_existing_property input:hidden[name=property_id]").val( ui.item.value.property_id );
          $("#selected_property_name").html(ui.item.value.property_name);
          for (value in ui.item.value.property_values) {
            $("#selected_property_values").append('<li>'+property_value_html(value)+'</li>');
          }
          $("#existing_property_display").show();

          return false;
        }
      });
    };

    var receiver_change_reaction = function(receiver_type) {
      with_descriptors(
        receiver_type, 
        function(descriptors) {
          add_method_change_reaction(descriptors);
          update_descriptor_select(descriptors);
          if (descriptors.length > 0) update_qualifier_lists(descriptors[0].qualifiers);
          add_descriptor_change_reaction(descriptors);
          enable_autocomplete(descriptors);
        }
      );
    }

    jQuery(function($) {
      $("#property_receiver").change(function() {
        receiver_change_reaction($("#property_receiver").val());
      });

      $("#add_value_click").click(function() {
        var mod = $("#property_receiver").val();
        var did = selected_descriptor_id();
        
        $.get(
          "/items/"+mod+"/property_form_fragment/"+did, 
          function(data) { $("#new_property_values").append(data); }
        );
      });

      $("#remove_value_click").click(function(ev) { $(ev.target).parent("li").remove();});
    });
  </script>
<% end %>

<div id="add_property_form">
  <input id="property_receiver" type="text" style="display:none"/>

  <ul>
    <li><input type="radio" name="add_property_method" value="existing" checked /> Add Existing</li>
    <li><input type="radio" name="add_property_method" value="new"/> Add New</li>
    <li>Choose a property type: <select id="descriptor_select"></select></li>

    <!-- microform to create a new property -->
    <li id="add_new_property" style="display: none">
      <dl>
        <dt>Property Name:</dt>
        <dd><%= text_field_tag :property_name %></dd>
        <dt class="qualifier_select">Qualifiers:</dt>
        <dd class="qualifier_select"><select name="property_qualifiers" multiple="true"></select></dd>
        <dt>Possible Values: <span id="add_value_click">(+)</span></dt>
        <dd>
          <ul id="new_property_values">
            <li class="prototype"><span class="remove_value_click">(-)</span></li>
          </ul>
        </dd>
      </dl>
    </li>

    <!-- microform to create a new association between the item and an existing property -->
    <li id="add_existing_property">
      Search Properties: <input id="add_existing_property_search" type="text"/><br/>
      <input type="hidden" name="property_id"/>
      <span class="search_notice"></span>
      <dl id="existing_property_display" style="display: none">
        <dt>Property Name:</dt>
        <dd id="selected_property_name"></dd>
        <dt class="qualifier_select">Qualifiers:</dt>
        <dd class="qualifier_select"><select name="property_qualifiers" multiple="true"></select></dd>
        <dt>Values:</dt>
        <dd id="selected_property_values"><ul></ul></dd>
      </dl>
    </li>
  </ul>

  <button id="add_property_submit" style="display:none">Submit</button>
  <button id="add_property_cancel">Cancel</button>
</div>
