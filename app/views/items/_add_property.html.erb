<% content_for :head do %>
  <script type="text/javascript">
    var add_method = function() {

      return $('#add_property_form input:radio[name=add_property_method]:checked').val();
    };

    var selected_descriptor_id = function() {
      return $("#descriptor_select option:selected").val();
    };

    var descriptors = <%= raw descriptors_json(item.class) %>;

    var add_property_data = function() {
        var request = {
          type: add_method(),
          qualifiers: [],
          data: { }
        };

        var add_qualifiers = function(element) {
          $("select[name=property_qualifiers] > option:selected", element).each(
            function(index, element) {
              request.qualifiers.push($(element).val());
            }
          );
        };
        
        if (add_method() === "new") {
          var form_element = $("#add_new_property");
          add_qualifiers(form_element);

          request.data.name = $("input:text[name=property_name]", form_element).val();
          request.data.descriptor_id = selected_descriptor_id();
          request.data.values = [];

          $("#new_property_values div.property_value.descriptor_"+request.data.descriptor_id).each(
            function(index, pv_element) {
              var new_value = {};
              $(".property_value_field", pv_element).each(
                function(vfi, vf_element) {
                  new_value[$(vf_element).attr('name')] = vf_element.val();
                }
              );
              
              request.data.values.push(new_value);
            }
          );
        } else {
          var form_element = $("#add_existing_property");
          add_qualifiers(form_element);
          request.data.property_id = $("input:hidden[name=property_id]", form_element).val();
        }

        return request;
    };

    // replaces the options for the property qualifier select in both the new and existing microforms
    var update_qualifier_lists = function(did) {
      $("select[name=property_qualifiers] > option").remove();
      if ($("#property_qualifier_options_"+did+" > option").length === 0) {
        $(".qualifier_select").hide(); 
      } else {
        $("select[name=property_qualifiers]").append($("#property_qualifier_options_"+did+" > option"));
        $(".qualifier_select").show(); 
      }
    };

    jQuery(function($) {
      $("#add_property_form input:radio[name=add_property_method]").change(
        function(ev) {
          if ($(ev.target).val() === "new") {
            $("#add_existing_property").hide();
            $("#add_new_property").show();
            $("#add_property_submit" ).show();
            update_qualifier_lists(selected_descriptor_id());
          } else {
            $("#add_new_property").hide();
            $("#add_existing_property").show();
          }
        }
      );

      $("#descriptor_select").change(
        function(ev) {
          var did = selected_descriptor_id();

          update_qualifier_lists(did);
          if (add_method() === "new") {
            $("#new_property_values div.property_value").hide();
            $("#new_property_values div.descriptor_"+did).show();
          } else {
            // just hide the display and remove the value from the hidden field.
            // it will be repopulated when the user selects a new value from 
            // a search
            $("#add_property_submit" ).hide();
            $("#add_existing_property_search").val('');
            $("#add_existing_property input:hidden[name=property_id]").val(null);
            $("#existing_property_display").hide();
          }
        }
      );

      $("#add_value_click").click(
        function() {
          var did = selected_descriptor_id();
          var new_value_form = $("#add_new_property .prototype.property_value.descriptor_"+did).clone().removeClass("prototype");
          var new_li = $("#new_property_values li.prototype").clone().removeClass("prototype").append(new_value_form);
          $("#new_property_values").append(new_li);
        }
      );

      $("#remove_value_click").click(function(ev) { $(ev.target).parent("li").remove();});

      $("#add_existing_property_search").autocomplete({
        minLength: 0,
        source: function( request, response ) {
          var request_body = {
            family: descriptors[selected_descriptor_id()].family, 
            term: request.term
          };

          var response_wrapper = function(data) {
            if (data.length == 0) $(".search_notice").html('(no results returned)');
            return response(data);
          };

          $(".search_notice").html('');
          $("#existing_property_display").hide();
          $.get("/properties/search", request_body, response_wrapper, "json");
        },
        select: function( event, ui ) {
          // ui.item.value is an object with the following structure:
          //{
          //  property_id: int,
          //  property_name: string,
          //  property_values: [object]
          //}
          
          $("#add_property_submit").show();
          $("#add_existing_property_search").val( ui.item.label );
          $("#add_existing_property input:hidden[name=property_id]").val( ui.item.value.property_id );
          $("#selected_property_name").html(ui.item.value.property_name);
          for (value in ui.item.value.property_values) {
            $("#selected_property_values").append('<li>'+property_value_html(value)+'</li>');
          }
          $("#existing_property_display").show();

          return false;
        }
      });
    });
  </script>
<% end %>

<div id="<%= form_css_id %>" class="<%= form_css_class %>">
  <ul>
    <li><input type="radio" name="add_property_method" value="existing" checked /> Add Existing</li>
    <li><input type="radio" name="add_property_method" value="new"/> Add New</li>
  </ul>

  Choose a property type: <%= descriptor_select item.class, :id => :descriptor_select %>

  <!-- microform to create a new property -->
  <div id="add_new_property" style="display: none">
    <!-- a prototype microform for each descriptor, to be cloned into the new_property_values list -->
    <% descriptors(item.class).each_with_index do |descriptor, i| %>
      <%= property_qualifiers_select_tag(descriptor, :id => "property_qualifier_options_#{i}", :class => "prototype") %>
      <div class="prototype property_value descriptor_<%=i%>">
        <dl>
          <dt>Value Name:</dt>
          <dd><%= text_field_tag :value_name %></dd>
          <% descriptor.value_structure.each do |name, type| %>
            <dt><%= name.to_s.titlecase %>:</dt>
            <dd><%= property_value_field_tag(name, type) %></dd>
          <% end %>
        </dl>
      </div>
    <% end %>

    <!-- the visible property creation form -->
    <dl>
      <dt>Property Name:</dt>
      <dd><%= text_field_tag :property_name %></dd>
      <dt class="qualifier_select">Qualifiers:</dt>
      <dd class="qualifier_select"><select name="property_qualifiers" multiple="true"></select></dd>
      <dt>Possible Values: <span id="add_value_click">(+)</span></dt>
      <dd>
        <ul id="new_property_values">
          <li class="prototype"><span class="remove_value_click">(-)</span></li>
        </ul>
      </dd>
    </dl>
  </div>

  <!-- microform to create a new association between the item and an existing property -->
  <div id="add_existing_property">
    Search Properties: <input id="add_existing_property_search" type="text"/><br/>
    <input type="hidden" name="property_id"/>
    <span class="search_notice"></span>
    <dl id="existing_property_display" style="display: none">
      <dt>Property Name:</dt>
      <dd id="selected_property_name"></dd>
      <dt class="qualifier_select">Qualifiers:</dt>
      <dd class="qualifier_select"><select name="property_qualifiers" multiple="true"></select></dd>
      <dt>Values:</dt>
      <dd id="selected_property_values"><ul></ul></dd>
    </dl>
  </div>

  <button id="add_property_submit" style="display:none">Submit</button>
  <button id="add_property_cancel">Cancel</button>
</div>
